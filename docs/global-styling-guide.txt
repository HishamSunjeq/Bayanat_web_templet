# Bayanat Web Template - Global Styling Documentation

## Overview
This document explains the global styling system in the Bayanat web template project, including the theme system and layout structure. Understanding these global styles will help you when adding content to pages.

## Theme System (ThemeStyles.css)

### CSS Variables
The project uses CSS variables (custom properties) to maintain consistent styling across the application. These variables are defined in the root element and can be accessed throughout the application.

#### Light Theme (Default)
```css
:root {
  --bg-primary: #f0f2f5;
  --bg-secondary: #f8f9fa;
  --text-primary: #333333;
  --text-secondary: #555555;
  --border-color: #e6e6e6;
  --input-bg: #f7f7f7;
  --input-text: #212529;
  --input-border: #e6e6e6;
  --input-placeholder: rgba(0, 0, 0, 0.4);
  --card-bg: #f5f5f5;
  --card-border: #e6e6e6;
  --card-shadow: rgba(0, 0, 0, 0.1);
  --accent-color: #cc0000;
  --accent-hover: #990000;
  --accent-shadow: rgba(204, 0, 0, 0.15);
  --input-group-bg: #f0f0f0;
  --border-color: rgba(0, 0, 0, 0.4);
}
```

#### Dark Theme
```css
.dark-theme {
  --bg-primary: #1e1e1e;
  --bg-secondary: #2a2a2a;
  --text-primary: #ffffff;
  --text-secondary: rgba(255, 255, 255, 0.7);
  --border-color: #444;
  --input-bg: #3a3a3a;
  --input-text: #ffffff;
  --input-border: #555;
  --input-placeholder: rgba(255, 255, 255, 0.5);
  --card-bg: #2a2a2a;
  --card-border: #444;
  --card-shadow: rgba(0, 0, 0, 0.5);
  --accent-color: #cc0000;
  --accent-hover: #990000;
  --accent-shadow: rgba(204, 0, 0, 0.25);
  --input-group-bg: #3a3a3a;
  --border-color: rgba(255, 255, 255, 0.5);
}
```

### Global Element Styling
- Smooth transitions between theme changes
- Custom scrollbar styling
- Overflow handling for HTML and body elements

## Layout System (MainLayout.css)

### Main Layout Structure
```css
.main-layout {
  display: flex;
  flex-direction: column;
  height: 100vh;
  width: 100%;
  background-color: var(--bg-primary);
  color: var(--text-primary);
}

.layout-content {
  display: flex;
  flex: 1;
  overflow: hidden;
}
```

### Page Content Styling
```css
.page-content {
  flex: 1;
  padding: 1.5rem;
  overflow-y: auto;
  background-color: var(--bg-primary);
  transition: all 0.3s ease;
  margin-left: 0;
  transition: margin-left 0.1s ease-in-out;
}
```

### Responsive Behavior
The layout adjusts based on screen size and sidebar state:
```css
.sidebar:not(.open) + .page-content {
  margin-left: 0;
}

@media (min-width: 991.98px) {
  .page-content {
    margin-left: 0;
  }
}

@media (max-width: 991.98px) {
  .sidebar:not(.open) + .page-content {
    margin-left: 0;
  }
}
```

## How This Affects Your Content

When adding content to pages in the application:

1. **Theme Variables**: All content will automatically use the color scheme defined by the current theme (light or dark). Use the CSS variables in your component styles to maintain consistency.

2. **Layout Container**: Content should be placed within the `.page-content` container, which provides:
   - Proper padding (1.5rem)
   - Automatic vertical scrolling
   - Theme-based background color
   - Smooth transitions

3. **Responsive Design**: The layout system handles responsive behavior automatically, adjusting spacing and margins based on screen size and sidebar state.

4. **Global Elements**: Your content will inherit global styling for elements like scrollbars and transitions.

## Using Global Styles in Components

To leverage the global styling in your component:

1. Use theme variables for colors and styling:
   ```css
   .my-component {
     background-color: var(--bg-secondary);
     color: var(--text-primary);
     border: 1px solid var(--border-color);
   }
   ```

2. For component-specific styles, create a dedicated CSS file while still referencing global variables.

3. Place your component content within the MainLayout structure to inherit the layout styling.

## Best Practices

1. Always use the CSS variables for colors and styling to maintain consistency.
2. Test your components in both light and dark themes.
3. Ensure your content works well within the responsive layout system.
4. Create component-specific CSS files for unique styling needs.
